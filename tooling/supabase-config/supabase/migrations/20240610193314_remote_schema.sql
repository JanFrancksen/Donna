create table "public"."nutrient_units" (
    "id" uuid not null default gen_random_uuid(),
    "unit_name" text,
    "unit_symbol" text
);


alter table "public"."nutrient_units" enable row level security;

create table "public"."planned_recipes" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "recipe_id" uuid not null,
    "planned_date" date not null
);


alter table "public"."planned_recipes" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "website" text
);


alter table "public"."profiles" enable row level security;

create table "public"."recipe_likes" (
    "id" bigint generated by default as identity not null,
    "liked_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default gen_random_uuid(),
    "recipe_id" uuid not null
);


alter table "public"."recipe_likes" enable row level security;

create table "public"."recipe_steps" (
    "id" bigint generated by default as identity not null,
    "recipe_id" uuid not null,
    "title" text not null,
    "description" text not null,
    "order" smallint not null
);


alter table "public"."recipe_steps" enable row level security;

create table "public"."recipes" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone,
    "name" text not null,
    "description" text,
    "image_url" text,
    "categories" text[],
    "created_by" uuid
);


alter table "public"."recipes" enable row level security;

CREATE UNIQUE INDEX nutrient_units_pkey ON public.nutrient_units USING btree (id);

CREATE UNIQUE INDEX planned_recipes_pkey ON public.planned_recipes USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

CREATE UNIQUE INDEX recipe_likes_pkey ON public.recipe_likes USING btree (id);

CREATE UNIQUE INDEX recipe_steps_pkey ON public.recipe_steps USING btree (id);

CREATE UNIQUE INDEX recipes_pkey ON public.recipes USING btree (id);

CREATE UNIQUE INDEX unique_like ON public.recipe_likes USING btree (user_id, recipe_id);

alter table "public"."nutrient_units" add constraint "nutrient_units_pkey" PRIMARY KEY using index "nutrient_units_pkey";

alter table "public"."planned_recipes" add constraint "planned_recipes_pkey" PRIMARY KEY using index "planned_recipes_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."recipe_likes" add constraint "recipe_likes_pkey" PRIMARY KEY using index "recipe_likes_pkey";

alter table "public"."recipe_steps" add constraint "recipe_steps_pkey" PRIMARY KEY using index "recipe_steps_pkey";

alter table "public"."recipes" add constraint "recipes_pkey" PRIMARY KEY using index "recipes_pkey";

alter table "public"."planned_recipes" add constraint "planned_recipes_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."planned_recipes" validate constraint "planned_recipes_recipe_id_fkey";

alter table "public"."planned_recipes" add constraint "planned_recipes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."planned_recipes" validate constraint "planned_recipes_user_id_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles" validate constraint "username_length";

alter table "public"."recipe_likes" add constraint "recipe_likes_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recipe_likes" validate constraint "recipe_likes_recipe_id_fkey";

alter table "public"."recipe_likes" add constraint "recipe_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recipe_likes" validate constraint "recipe_likes_user_id_fkey";

alter table "public"."recipe_likes" add constraint "unique_like" UNIQUE using index "unique_like";

alter table "public"."recipe_steps" add constraint "recipe_steps_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recipe_steps" validate constraint "recipe_steps_recipe_id_fkey";

alter table "public"."recipes" add constraint "recipes_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recipes" validate constraint "recipes_created_by_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

grant delete on table "public"."nutrient_units" to "anon";

grant insert on table "public"."nutrient_units" to "anon";

grant references on table "public"."nutrient_units" to "anon";

grant select on table "public"."nutrient_units" to "anon";

grant trigger on table "public"."nutrient_units" to "anon";

grant truncate on table "public"."nutrient_units" to "anon";

grant update on table "public"."nutrient_units" to "anon";

grant delete on table "public"."nutrient_units" to "authenticated";

grant insert on table "public"."nutrient_units" to "authenticated";

grant references on table "public"."nutrient_units" to "authenticated";

grant select on table "public"."nutrient_units" to "authenticated";

grant trigger on table "public"."nutrient_units" to "authenticated";

grant truncate on table "public"."nutrient_units" to "authenticated";

grant update on table "public"."nutrient_units" to "authenticated";

grant delete on table "public"."nutrient_units" to "service_role";

grant insert on table "public"."nutrient_units" to "service_role";

grant references on table "public"."nutrient_units" to "service_role";

grant select on table "public"."nutrient_units" to "service_role";

grant trigger on table "public"."nutrient_units" to "service_role";

grant truncate on table "public"."nutrient_units" to "service_role";

grant update on table "public"."nutrient_units" to "service_role";

grant delete on table "public"."planned_recipes" to "anon";

grant insert on table "public"."planned_recipes" to "anon";

grant references on table "public"."planned_recipes" to "anon";

grant select on table "public"."planned_recipes" to "anon";

grant trigger on table "public"."planned_recipes" to "anon";

grant truncate on table "public"."planned_recipes" to "anon";

grant update on table "public"."planned_recipes" to "anon";

grant delete on table "public"."planned_recipes" to "authenticated";

grant insert on table "public"."planned_recipes" to "authenticated";

grant references on table "public"."planned_recipes" to "authenticated";

grant select on table "public"."planned_recipes" to "authenticated";

grant trigger on table "public"."planned_recipes" to "authenticated";

grant truncate on table "public"."planned_recipes" to "authenticated";

grant update on table "public"."planned_recipes" to "authenticated";

grant delete on table "public"."planned_recipes" to "service_role";

grant insert on table "public"."planned_recipes" to "service_role";

grant references on table "public"."planned_recipes" to "service_role";

grant select on table "public"."planned_recipes" to "service_role";

grant trigger on table "public"."planned_recipes" to "service_role";

grant truncate on table "public"."planned_recipes" to "service_role";

grant update on table "public"."planned_recipes" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."recipe_likes" to "anon";

grant insert on table "public"."recipe_likes" to "anon";

grant references on table "public"."recipe_likes" to "anon";

grant select on table "public"."recipe_likes" to "anon";

grant trigger on table "public"."recipe_likes" to "anon";

grant truncate on table "public"."recipe_likes" to "anon";

grant update on table "public"."recipe_likes" to "anon";

grant delete on table "public"."recipe_likes" to "authenticated";

grant insert on table "public"."recipe_likes" to "authenticated";

grant references on table "public"."recipe_likes" to "authenticated";

grant select on table "public"."recipe_likes" to "authenticated";

grant trigger on table "public"."recipe_likes" to "authenticated";

grant truncate on table "public"."recipe_likes" to "authenticated";

grant update on table "public"."recipe_likes" to "authenticated";

grant delete on table "public"."recipe_likes" to "service_role";

grant insert on table "public"."recipe_likes" to "service_role";

grant references on table "public"."recipe_likes" to "service_role";

grant select on table "public"."recipe_likes" to "service_role";

grant trigger on table "public"."recipe_likes" to "service_role";

grant truncate on table "public"."recipe_likes" to "service_role";

grant update on table "public"."recipe_likes" to "service_role";

grant delete on table "public"."recipe_steps" to "anon";

grant insert on table "public"."recipe_steps" to "anon";

grant references on table "public"."recipe_steps" to "anon";

grant select on table "public"."recipe_steps" to "anon";

grant trigger on table "public"."recipe_steps" to "anon";

grant truncate on table "public"."recipe_steps" to "anon";

grant update on table "public"."recipe_steps" to "anon";

grant delete on table "public"."recipe_steps" to "authenticated";

grant insert on table "public"."recipe_steps" to "authenticated";

grant references on table "public"."recipe_steps" to "authenticated";

grant select on table "public"."recipe_steps" to "authenticated";

grant trigger on table "public"."recipe_steps" to "authenticated";

grant truncate on table "public"."recipe_steps" to "authenticated";

grant update on table "public"."recipe_steps" to "authenticated";

grant delete on table "public"."recipe_steps" to "service_role";

grant insert on table "public"."recipe_steps" to "service_role";

grant references on table "public"."recipe_steps" to "service_role";

grant select on table "public"."recipe_steps" to "service_role";

grant trigger on table "public"."recipe_steps" to "service_role";

grant truncate on table "public"."recipe_steps" to "service_role";

grant update on table "public"."recipe_steps" to "service_role";

grant delete on table "public"."recipes" to "anon";

grant insert on table "public"."recipes" to "anon";

grant references on table "public"."recipes" to "anon";

grant select on table "public"."recipes" to "anon";

grant trigger on table "public"."recipes" to "anon";

grant truncate on table "public"."recipes" to "anon";

grant update on table "public"."recipes" to "anon";

grant delete on table "public"."recipes" to "authenticated";

grant insert on table "public"."recipes" to "authenticated";

grant references on table "public"."recipes" to "authenticated";

grant select on table "public"."recipes" to "authenticated";

grant trigger on table "public"."recipes" to "authenticated";

grant truncate on table "public"."recipes" to "authenticated";

grant update on table "public"."recipes" to "authenticated";

grant delete on table "public"."recipes" to "service_role";

grant insert on table "public"."recipes" to "service_role";

grant references on table "public"."recipes" to "service_role";

grant select on table "public"."recipes" to "service_role";

grant trigger on table "public"."recipes" to "service_role";

grant truncate on table "public"."recipes" to "service_role";

grant update on table "public"."recipes" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."planned_recipes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."planned_recipes"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for authenticated users"
on "public"."planned_recipes"
as permissive
for select
to authenticated
using (true);


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable deleting likes for users that liked it"
on "public"."recipe_likes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."recipe_likes"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."recipe_likes"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."recipe_steps"
as permissive
for select
to public
using (true);


create policy "Enable delete for users who created the recipe"
on "public"."recipes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = created_by));


create policy "Enable insert for users based on who created the recipe"
on "public"."recipes"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = created_by));


create policy "Enable read access for all users"
on "public"."recipes"
as permissive
for select
to public
using (true);



